# vim: ft=sh
#

lfs_log_() {
  local script_file=$(basename "$1")
  local text="$2"

  # Note: using UTF so that all log messages are consistent.
  printf "%s: %-29s %s\n" "$(TZ=UTF date +'%Y-%m-%d %H:%M:%S')" $script_file      "$text" >> $lfs_root/log
}
export -f lfs_log_

lfs_log() {
  local text="$1"
  lfs_log_ "${BASH_SOURCE[1]}" "  $text"
}
export -f lfs_log


lfs_run_step() {
  local step_name=$1
  local script_name=${BASH_SOURCE[1]}


# lfs_log_ $script_name "lfs_run_step, \$lfs_root  = $lfs_root"
# lfs_log_ $script_name "lfs_run_step, \$step_name = $step_name"
# lfs_log_ $script_name "lfs_run_step ls -l \$lfs_root/done/\$step_name: $($lfs_root/done/$step_name)"
# lfs_log_ $script_name "lfs_run_step ls -l \$lfs_root/done: $(lfs_root/done)"

  if [[ -f $lfs_root/done/$step_name ]]; then
    lfs_log_ $script_name "already done: $step_name"
    return
  fi

  lfs_log_ $script_name "doing step   : $step_name, id=$(id)"

  if [[ $lfs_in_chroot_env == 'yes' ]]; then #_{

     find / -path '/proc'          -prune -o \
            -path '/sources'       -prune -o \
            -path '/dev'           -prune -o \
            -path '/lfs'           -prune -o \
            -path '/sys'           -prune -o \
            -path '/usr/include'   -prune -o \
            -path '/usr/lib/gconv' -prune -o \
            -path '/usr/share'     -prune -o \
            -path '/tools/*/*'     -prune -o \
            -print > $lfs_root/done/$step_name.tree.before
  fi #_}

  local start_time=$SECONDS
  lfs_log_ $script_name "lfs_run_step \$-=$-, SHELLOPTS=$SHELLOPTS, BASH_ENV=$BASH_ENV id=$(id)"
  if $lfs_root/steps/$step_name; then
    if ! touch $lfs_root/done/$step_name; then
      lfs_log_ $script_name "!!! Could not touch $lfs_root/done/$step_name"
    fi
    
#   lfs_log_ "TOUCH_INFO", "$lfs_root/done/$step_name"
#   lfs_log_ "DONE-INFO-1", "ls -l $(ls -l /var/tmp/Linux-From-Scratch/mnt-lfs/lfs/done/fetch-pacakges-and-patches)"
#   lfs_log_ "DONE-INFO-a", "ls -l $(ls -l $lfs_root/done/$step_name)"
    local diff_time=$(( $SECONDS - $start_time ))

    local space_free=$(df | grep "/dev/$lfs_partition_device$lfs_root_partition_nr" | awk '{ print $5 }')
    lfs_log_ $script_name "step $step_name done, took $diff_time seconds, mount LFS used: $space_free"
#   lfs_log_ "DONE-INFO-2", "ls -l $(ls -l /var/tmp/Linux-From-Scratch/mnt-lfs/lfs/done/fetch-pacakges-and-patches)"
  else
    lfs_log_ $script_name "step $step_name failed"
    exit 1
  fi

  if [[ $lfs_in_chroot_env == 'yes' ]]; then #_{

     find / -path '/proc'          -prune -o \
            -path '/sources'       -prune -o \
            -path '/dev'           -prune -o \
            -path '/lfs'           -prune -o \
            -path '/sys'           -prune -o \
            -path '/usr/include'   -prune -o \
            -path '/usr/lib/gconv' -prune -o \
            -path '/usr/share'     -prune -o \
            -path '/tools/*/*'     -prune -o \
            -print > $lfs_root/done/$step_name.tree.after
  fi #_}
}
export -f lfs_run_step

lfs_trap_err_handler() {
  local line=$1
  local script_name=${BASH_SOURCE[1]}
  lfs_log_ $script_name "  trapped error at line $line"
  exit 1
}
export -f lfs_trap_err_handler

lfs_trap_err() {
  trap 'lfs_trap_err_handler $LINENO' ERR
}
export -f lfs_trap_err

lfs_untar_and_cd() {
  local tar_pattern=$1
  local script_name=${BASH_SOURCE[1]}
  lfs_log_ $script_name "  lfs_untar_and_cd, tar_pattern=$tar_pattern"

  cd $lfs_source_dir
  if [ -d untarred/$tar_pattern-* ]; then
    lfs_log_ $script_name "  lfs_untar_and_cd, untarred untarred/$tar_pattern exists, removing it. PWD=$PWD"
    rm -rf untarred/$tar_pattern-*
  else
    lfs_log_ $script_name "  lfs_untar_and_cd, untarred untarred/$tar_pattern does not exist. PWD=$PWD"
  fi

  lfs_log "ls -l $tar_pattern-*.tar.*: $(ls -l $tar_pattern-*.tar.*), PWD=$PWD"
  lfs_log "untarring $tar_pattern-*, PWD=$PWD"
  if ! tar xf $tar_pattern-*.tar.* -C untarred ; then
    lfs_log "tar returned $?"
    return 1
  fi


  lfs_log "cd to untarred/$tar_pattern-*, PWD=$PWD"
  cd untarred/$tar_pattern-*

}
export -f lfs_untar_and_cd

lfs_cd_untarred() {
  local tar_pattern=$1
  local script_name=${BASH_SOURCE[1]}

# lfs_log_ $script_name "lfs_source_dir=$lfs_source_dir"

# if [[ ! -d $lfs_source_dir ]]; then
#   lfs_log_ $script_name "lfs_cd_untarred: lfs_source_dir $lfs_source_dir is not a directory";
# fi
     
  lfs_log_ $script_name "  lfs_cd_untarred: cd'ing into $lfs_source_dir/untarred/$tar_pattern-*"
  cd $lfs_source_dir/untarred/$tar_pattern-*
}
export -f lfs_cd_untarred
