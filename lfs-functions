# vi: ft=sh foldmarker=_{,_} foldmethod=marker
#

lfs_log_() { #_{
  local script_file=$(basename "$1")
  local text="$2"

  # Note: using UTF so that all log messages are consistent.
  printf "%s: %-29s %s\n" "$(TZ=UTF date +'%Y-%m-%d %H:%M:%S')" $script_file      "$text" >> $lfs_root/log
}
export -f lfs_log_
#_}

lfs_log() { #_{
  local text="$1"
  lfs_log_ "${BASH_SOURCE[1]}" "  $text"
}
export -f lfs_log
#_}

lfs_take_fs_snapshot() { #_{

  local step_name=$1
  local suffix=$2

  local out_file=${lfs_root}/fs_snapshots/$step_name.$suffix

  if [ -e $out_file ]; then
    lfs_log "$out_file already exists, I am not overwriting it, I return."
    return 0
  fi

#        -path '/usr/lib/python2.7/*'     -prune -o \
#        -path '/usr/lib/python3.6/*'     -prune -o \
#        -path '/usr/lib/gconv'           -prune -o \
#        -name '.git'                     -prune -o \

  #      -path  ${lfs_dir%/}                  -prune -o \

  find $LFS                                             \
         -path "$LFS/proc"                    -prune -o \
         -path "$LFS/sources"                 -prune -o \
         -path "$LFS/dev"                     -prune -o \
         -path "$LFS/lfs"                     -prune -o \
         -path "$LFS/sys"                     -prune -o \
         -path "$LFS/usr/include"             -prune -o \
         -path "$LFS/usr/lib/*"               -prune -o \
         -path "$LFS/usr/lfs"                 -prune -o \
         -path "$LFS/usr/share"               -prune -o \
         -path "$LFS/lost+found"              -prune -o \
         -path "$LFS/tools/*/*"               -prune -o \
         -path "$LFS/lib/libreoffice/*"       -prune -o \
         -path "$LFS/opt/ant-*/manual"        -prune -o \
         -path "$LFS/opt/OpenJDK-*-bin/*"     -prune -o \
         -path "$LFS/root"                    -prune -o \
         -path "$LFS/tmp"                     -prune -o \
         -path "$LFS/boot/grub/*"             -prune -o \
         -path "$LFS/run/udev/*"              -prune -o \
         -path "$LFS/mnt"                     -prune -o \
         -print > $out_file

}
export -f lfs_take_fs_snapshot
#_}

lfs_run_step() { #_{

  # V.2:
  trap 'echo Error at line $LINENO; exit 1' ERR

  local step_name=$1
  local script_name=${BASH_SOURCE[1]}


# lfs_log_ $script_name "lfs_run_step, \$lfs_root  = $lfs_root"
# lfs_log_ $script_name "lfs_run_step, \$step_name = $step_name"
# lfs_log_ $script_name "lfs_run_step ls -l \$lfs_root/done/\$step_name: $($lfs_root/done/$step_name)"
# lfs_log_ $script_name "lfs_run_step ls -l \$lfs_root/done: $(lfs_root/done)"

  if [[ -f $lfs_root/done/$step_name ]]; then
    lfs_log_ $script_name "already done: $step_name ($lfs_root/done/$step_name exists)"
    return
  fi

  lfs_log_ $script_name "doing step   : $step_name, id=$(id) PWD=${PWD}"

  lfs_take_fs_snapshot $step_name before

# V.2  if [[ $lfs_in_chroot_env == 'yes' ]]; then #_{
# V.2
# V.2     find / -path '/proc'          -prune -o \
# V.2            -path '/sources'       -prune -o \
# V.2            -path '/dev'           -prune -o \
# V.2            -path '/lfs'           -prune -o \
# V.2            -path '/sys'           -prune -o \
# V.2            -path '/usr/include'   -prune -o \
# V.2            -path '/usr/lib/gconv' -prune -o \
# V.2            -path '/usr/share'     -prune -o \
# V.2            -path '/tools/*/*'     -prune -o \
# V.2            -print > $lfs_root/done/$step_name.tree.before
# V.2  fi #_}

  local start_time=$SECONDS

  lfs_log "Trying to pushd into steps, PWD=${PWD}"
  pushd steps > /dev/null
  lfs_log "Trying to execute step $step_name, PWD=${PWD}"

  if [[ ! -r ./$step_name ]]; then

    lfs_log "$step_name does not exist, PWD=${PWD}"
    popd
    return -1

  fi

# trap 'echo ./$step_name caused an error in $script_name at line $LINENO; exit 1' ERR
  ./$step_name
# trap 'echo Error at line $LINENO; exit 1' ERR
  popd        > /dev/null

  if ! touch $lfs_root/done/$step_name; then
    lfs_log_ $script_name "!!! Could not touch $lfs_root/done/$step_name"
  fi

# V.2  lfs_log_ $script_name "lfs_run_step \$-=$-, SHELLOPTS=$SHELLOPTS, BASH_ENV=$BASH_ENV id=$(id)"
# V.2  if $lfs_root/steps/$step_name; then #_{ Try to run step
# V.2    if ! touch $lfs_root/done/$step_name; then
# V.2      lfs_log_ $script_name "!!! Could not touch $lfs_root/done/$step_name"
# V.2    fi
# V.2    
# V.2#   lfs_log_ "TOUCH_INFO", "$lfs_root/done/$step_name"
# V.2#   lfs_log_ "DONE-INFO-1", "ls -l $(ls -l /var/tmp/Linux-From-Scratch/mnt-lfs/lfs/done/fetch-pacakges-and-patches)"
# V.2#   lfs_log_ "DONE-INFO-a", "ls -l $(ls -l $lfs_root/done/$step_name)"
# V.2    local diff_time=$(( $SECONDS - $start_time ))
# V.2
# V.2    local space_free=$(df | grep "/dev/$lfs_partition_device$lfs_root_partition_nr" | awk '{ print $5 }')
# V.2    lfs_log_ $script_name "step $step_name done, took $diff_time seconds, mount LFS used: $space_free<"
# V.2#   lfs_log_ "DONE-INFO-2", "ls -l $(ls -l /var/tmp/Linux-From-Scratch/mnt-lfs/lfs/done/fetch-pacakges-and-patches)"
# V.2  #_}
# V.2  else #_{
# V.2    lfs_log_ $script_name "step $step_name failed"
# V.2    exit 1
# V.2  fi #_}

  local diff_time=$(( $SECONDS - $start_time ))
  local space_free=$(df | grep "/dev/$lfs_partition_device$lfs_root_partition_nr" | awk '{ print $5 }')
  lfs_log_ $script_name "step $step_name done, took $diff_time seconds, mount LFS used: $space_free"

  lfs_take_fs_snapshot $step_name after

# V.2  if [[ $lfs_in_chroot_env == 'yes' ]]; then #_{
# V.2
# V.2     find / -path '/proc'          -prune -o \
# V.2            -path '/sources'       -prune -o \
# V.2            -path '/dev'           -prune -o \
# V.2            -path '/lfs'           -prune -o \
# V.2            -path '/sys'           -prune -o \
# V.2            -path '/usr/include'   -prune -o \
# V.2            -path '/usr/lib/gconv' -prune -o \
# V.2            -path '/usr/share'     -prune -o \
# V.2            -path '/tools/*/*'     -prune -o \
# V.2            -print > $lfs_root/done/$step_name.tree.after
# V.2  fi #_}
}
export -f lfs_run_step
#_}

lfs_trap_err_handler() { #_{
  local line=$1
  local script_name=${BASH_SOURCE[1]}
  lfs_log_ $script_name "  trapped error at line $line"
  exit 1
}
export -f lfs_trap_err_handler
#_}

lfs_trap_err() { #_{
  trap 'lfs_trap_err_handler $LINENO' ERR
}
export -f lfs_trap_err
#_}

lfs_untar_and_cd() { #_{
  local tar_pattern=$1
  local script_name=${BASH_SOURCE[1]}
  lfs_log_ $script_name "  lfs_untar_and_cd, tar_pattern=$tar_pattern"

# V.2  cd $lfs_source_dir
  cd $lfs_root/sources

  lfs_log_ $script_name "  I am in PWD=$PWD"

  if [ -d untarred/$tar_pattern* ]; then
    lfs_log_ $script_name "  lfs_untar_and_cd, untarred/$tar_pattern exists, removing it. PWD=$PWD"
    rm -rf untarred/$tar_pattern*
  else
    lfs_log_ $script_name "  lfs_untar_and_cd, untarred/$tar_pattern does not exist. PWD=$PWD"
  fi

  lfs_log "ls -l tarred/$tar_pattern*.tar.*: $(ls -l $tar_pattern-*.tar.* 2>/dev/null), PWD=$PWD"
  lfs_log "untarring $tar_pattern*, PWD=$PWD"
  if ! tar xf tarred/$tar_pattern*.tar.* -C untarred ; then
    lfs_log "tar returned $?"
    return 1
  fi


# V.2.  lfs_log "cd to untarred/$tar_pattern-*, PWD=$PWD"
# V.2.  cd untarred/$tar_pattern-*
  lfs_cd_untarred $tar_pattern

}
export -f lfs_untar_and_cd
#_}

lfs_cd_untarred() { #_{
  local tar_pattern=$1
  local script_name=${BASH_SOURCE[1]}
     
# V.2  lfs_log_ $script_name "  lfs_cd_untarred: cd'ing into $lfs_source_dir/untarred/$tar_pattern-*"
# V.2  cd $lfs_source_dir/untarred/$tar_pattern-*
  lfs_log_ $script_name "  lfs_cd_untarred: cd'ing into $lfs_root/sources/untarred/$tar_pattern*"
  cd $lfs_root/sources/untarred/$tar_pattern*
  lfs_log_ $script_name "  I am in PWD=$PWD"
}
export -f lfs_cd_untarred
#_}

lfs_patch() { #_{
# local patch_file=$lfs_download_dir$1
  local patch_file=$LFS/usr/lfs/sources/tarred/$1

  if [ ! -r $patch_file ]; then
    lfs_log "patch file $patch_file is not readable"
    return 1
  fi

  lfs_log "Patching with patch file $patch_file in $PWD"

  patch -Np1 -i $patch_file
  return 0
}
export -f lfs_patch
#_}

lfs_start_step() { #_{
# trap 'echo Error in ${BASH_SOURCE} / $lfs_cur_step_name at line $LINENO; exit 1' ERR
  trap 'echo Error in ${BASH_SOURCE} at line $LINENO; exit 1' ERR
  lfs_log "Start step ${BASH_SOURCE} / $lfs_cur_step_name, umask=$(umask)"
}
export -f lfs_start_step
#_}

lfs_end_step() { #_{
  lfs_log "End step ${BASH_SOURCE}"
  return 0
}
export -f lfs_end_step
#_}
